const express = require("express");
const mysql = require("mysql");
const bodyParser = require("body-parser");

const app = express();
app.use(bodyParser.json());

// MySQL database connection configuration
const connection = mysql.createConnection({
  host: "localhost",
  user: "your_username",
  password: "your_password",
  database: "your_database",
});

// API endpoint for adding a customer
app.post("/addCustomer", (req, res) => {
  const { name, phoneNumber } = req.body;

  // Input parameter validation
  if (!name || !phoneNumber) {
    return res
      .status(400)
      .json({ error: "Name and phoneNumber are required fields." });
  }

  // Check for duplicate phone numbers
  connection.query(
    "SELECT COUNT(*) AS count FROM customers WHERE phoneNumber = ?",
    [phoneNumber],
    (err, result) => {
      if (err) {
        console.error("Error while checking duplicate phone numbers:", err);
        return res
          .status(500)
          .json({
            error: "An error occurred while checking duplicate phone numbers.",
          });
      }

      const count = result[0].count;

      if (count > 0) {
        return res.status(400).json({ error: "Phone number already exists." });
      }

      // Create a transaction connection for data integrity
      connection.beginTransaction((err) => {
        if (err) {
          console.error("Error while starting the database transaction:", err);
          return res
            .status(500)
            .json({
              error:
                "An error occurred  starting the database transaction.",
            });
        }

        // Insert customer into the customers table
        connection.query(
          "INSERT INTO customers (name, phoneNumber) VALUES (?, ?)",
          [name, phoneNumber],
          (err, result) => {
            if (err) {
              console.error("Error while adding the customer:", err);
              connection.rollback(() => {
                console.error("Database transaction rolled back.");
                return res
                  .status(500)
                  .json({
                    error: "An error occurred adding the customer.",
                  });
              });
            }

            // Commit the transaction
            connection.commit((err) => {
              if (err) {
                console.error(
                  "Error while committing the database transaction:",
                  err
                );
                connection.rollback(() => {
                  console.error("Database transaction rolled back.");
                  return res
                    .status(500)
                    .json({
                      error:
                        "An error occurred while committing the database transaction.",
                    });
                });
              }

              console.log("Customer added successfully.");
              res.status(200).json({ message: "Customer added successfully." });
            });
          }
        );
      });
    }
  );
});

// Start the server
app.listen(3000, () => {
  console.log("Server is running on port 3000");
});
